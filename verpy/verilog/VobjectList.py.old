
from __future__ import print_function, absolute_import
from VerpyError import *
from .VerilogMixins import CloneableMixin

class VobjectList(CloneableMixin):
    def __init__(self, parent, clstype):
        from .VerilogObject import VerilogObject
        assert issubclass(clstype, VerilogObject)
        # directly update dict, dont use self.xx, it'll call __setattr__
        self.__dict__['_parent'] = parent
        self.__dict__['_items'] = []
        self.__dict__['_names'] = {}
        self.__dict__['_cls'] = clstype

    def copyfrom(self, frm, func=None):
        self.__dict__['_parent'] = frm._parent    # shallow
        self.__dict__['_cls'] = frm._cls
        self.__dict__['_items'] = []
        self.__dict__['_name'] = frm.name
        for v in frm._items:
            if func is None or func(v): self.add(v.clone)

    def new(self, clstype=None, **kwargs):
        if clstype is None: clstype = self._cls
        assert 'name' in kwargs
        assert issubclass(clstype, self._cls)
        return self.add(clstype(**kwargs))

    def add(self, item):
        assert isinstance(item, self._cls)
        assert item.name not in self._names
        if item.parent is None: item.parent = self._parent
        item.index = len(self._items)
        self._items.append(item)
        self._names[item.name] = item
        return item

    def remove(self, ind):
        try:
            if isinstance(ind, (str,unicode)):
                ind = self._items.index(self._names[ind])
            name = self._items[ind].name
            del self._names[name]
            del self._items[ind]
        except LookupError:
            self._missing(ind)

    def __len__(self):
        return len(self._items)

    def _itemoper(self, op, key, *args):
        try:
            if isinstance(key, (int, str, unicode)):
                return getattr(self, op)(key, *args)
            elif isinstance(key, slice):
                return getattr(self, op+'s')(key.start or 0, key.stop or len(self), *args)
            elif isinstance(key, tuple):
                return getattr(self, op+'s')(key, *args)
        except LookupError:
            return self._missing(key)

    def __getitem__(self, key):
        return self._itemoper('getItem', key)
        #try:
        #    if isinstance(key, (int, str, unicode)):
        #        return self.getItem(key)
        #    elif isinstance(key, slice):
        #        return self.getItems(key.start or 0, key.stop or len(self))
        #    elif isinstance(key, tuple):
        #        return self.getItems(*key)
        #except LookupError:
        #    return self._missing(key)

    def __setitem__(self, key, val):
        assert isinstance(key, self._cls)
        self._itemoper('setItem', key, val)
        #try:
        #    if isinstance(key, (int, str, unicode)):
        #        self.setItem(key, val)
        #    elif isinstance(key, slice):
        #        self.setItems(key.start or 0, key.stop or len(self), val)
        #    elif isinstance(key, tuple):
        #        return self.setItems(*key, val)
        #except LookupError:
        #    return self._missing(key)

    def __delitem__(self, key):
        self._itemoper('delItem', key)
        #try:
        #    if isinstance(key, (int, str, unicode)):
        #        self.delItem(key)
        #    elif isinstance(key, slice):
        #        self.delItems(key.start or 0, key.stop or len(self))
        #    elif isinstance(key, tuple):
        #        return self.delItems(*key)
        #except LookupError:
        #    return self._missing(key)


    def _missing(self, key):
        raise InternalFatal("No attribute '%s' found for object '%s' of type '%s'",
                            key, self, self._cls)

    def _nameIsMethod(self, name):
        import types
        return hasattr(self._cls, name) and \
                isinstance(getattr(self._cls,name), types.MethodType)

    def __getattr__(self, name):
        print("getatt '%s' %s" % (name, self.__dict__))
        if name in self.__dict__: return self.__dict__[name]
        try: return [getattr(x, name) for x in self.__dict__['_items']]
        except AttributeError: self.__dict__['_missing'](name)

    # if set to array, it will apply each item attibute from array
    # if it's a single value, apply them all
    def __setattr__(self, name, val):
        try:
            object.__setattr__(self, name, val)
        except AttributeError:
            try:
                vals = val
                if not isinstance(val, list): vals = [val] * len(self)
                for (i,v) in enumerate(self.__dict__['_items']):
                    setattr(v, name, vals[i])
            except AttributeError: self.__dict__['_missing'](name)

    # iterable
    def __iter__(self):
        return iter(self._items)

    def getItem(self, ind):
        return self._items[ind] if isinstance(ind, int) else self._names[ind]

    def getItems(self, start, stop):
        return self.clone(func = lambda x: start <= x.index < stop)

    def setItem(self, ind, val):
        if isinstance(ind, int):
            self._items[ind] = val
        else:
            self._names[ind] = val

    def setItems(self, start, stop, vals):
        for i in range(start, stop):
            self._items[i] = vals[i]

    def delItem(self, ind):
        name = ind
        if isinstance(ind, int):
            name = self._items[ind].name
        else:
            ind = self._items.index(self._names[ind])
        del self._items[ind]
        del self._names[name]

    def delItems(self, start, stop):
        for i in range(start, stop):
            del self._names[self._items[i].name]
        del self._items[start, stop]

    def filter(self, func):
        if func is None: func = lambda x: x is not None
        return self.clone(func=func)

    def keys(self): return [x.name for x in self._items]

class ModuleList(VobjectList):
    def __init__(self, parent):
        from .Module import Module
        super(ModuleList,self).__init__(parent, Module)

class CellList(VobjectList):
    def __init__(self, parent):
        from .Cell import Cell
        super(CellList,self).__init__(parent, Cell)

class PinList(VobjectList):
    def __init__(self, parent):
        from .Pin import Pin
        super(PinList,self).__init__(parent, Pin)

class NetList(VobjectList):
    def __init__(self, parent):
        from .Net import Net
        super(NetList,self).__init__(parent, Net)

class AssignList(VobjectList):
    def __init__(self, parent):
        from .Assignment import Assignment
        super(AssignList,self).__init__(parent, Assignment)

class ContainerList(VobjectList):
    def __init__(self, parent):
        from .Assignment import NetContainer
        super(ContainerList,self).__init__(parent, NetContainer)

